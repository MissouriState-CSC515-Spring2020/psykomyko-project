{"version":3,"sources":["components/NavBar.js","components/videogames.js","components/movies.js","components/categories.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","VideoGames","charset","name","content","class","src","React","Component","Movies","Categories","App","NavBar","Jumbotron","to","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3f2aaabe.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText\r\n} from 'reactstrap';\r\nimport '../App.css'\r\n\r\nconst Navigation = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">MSU School Project</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/public/categories.html\">Categories</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"https://github.com/MissouriState-CSC515-Spring2020/psykomyko-project\">GitHub</NavLink>\r\n            </NavItem>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Items\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                  Movies\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  Video Games\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>\r\n                  Reset\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>\r\n          <NavbarText>Photo Project</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\n\r\nexport default class VideoGames extends React.Component { \r\n\r\n  render() {\r\n    return (\r\n      <div className = \"main-container\">\r\n          <head>\r\n            <meta charset=\"utf-8\" />    \r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=2\" />\r\n            <title>Video Games!</title> \r\n          </head>\r\n          <body>\r\n            <div class=\"container\">\r\n            <header>\r\n                <img src=\"Images/game_logo_collage_by_regnoart-dbjhp96.jpg\"/>              \r\n                           \r\n            </header>  \r\n\r\n            </div> \r\n           </body>        \r\n      </div>\r\n    );\r\n  }  \r\n};","import React from 'react';\r\n\r\nexport default class Movies extends React.Component { \r\n\r\n  render() {\r\n    return (\r\n      <div className = \"main-container\">\r\n          <head>\r\n            <meta charset=\"utf-8\" />    \r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=2\" />\r\n            <title>Movies!</title>        \r\n          </head>\r\n\r\n        <body>\r\n\r\n            <div class=\"container\">\r\n            <header>\r\n                <img src=\"Images/movieslogo.gif\"/>                  \r\n                        \r\n            </header>  \r\n\r\n            </div>\r\n        </body>\r\n                  \r\n      </div>\r\n    );\r\n  }  \r\n};","import React from 'react';\r\n\r\nexport default class Categories extends React.Component { \r\n\r\n  render() {\r\n    return (\r\n      <div className = \"main-container\">\r\n          <head>\r\n            <meta charset=\"utf-8\" />    \r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=2\" />\r\n            <title>Categories</title>        \r\n          </head>\r\n\r\n        <body>\r\n\r\n            <div class=\"container\">\r\n            <header>\r\n                <img src=\"Images/photoalbum.jpeg\"/>                    \r\n                        \r\n            </header>  \r\n\r\n            </div>\r\n        </body>        \r\n      </div>\r\n    );\r\n  }  \r\n};","import React from 'react';\nimport NavBar from './components/NavBar'\nimport {\n  Jumbotron     \n} from 'reactstrap';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport './App.css';\nimport VideoGames from \"./components/videogames\";\nimport Movies from './components/movies';\nimport Categories from './components/categories';\nimport { Link } from 'react-router-dom';\nimport { Switch } from 'react-router';\n\nexport default class App extends React.Component { \n\n  render() {\n    return (\n      <BrowserRouter>\n      <div>\n        <NavBar />\n        <Jumbotron>\n          <h1 className=\"display-3\">CSC515 School Project</h1>\n          <p className=\"lead\">Welcome to my project!</p>\n          <hr className=\"my-2\" />\n          <p>Checkpoint 4</p>\n          <p className=\"lead\">\n          </p>\n        </Jumbotron>\n\n        <ul>\n          <li>\n            <Link to ='/'>Home</Link>\n          </li>\n          <li>\n            <Link to ='/videogames'>Video Games</Link>\n          </li>\n          <li>\n            <Link to ='/movies'>Movies</Link>\n          </li>\n          <li>\n            <Link to ='/categories'>Categories</Link>\n          </li>\n        </ul>\n            <Switch>              \n              <Route path = '/videogames' component={VideoGames}/>\n              <Route path = '/movies' component={Movies}/>\n              <Route path = '/categories' component={Categories}/>\n            </Switch>\n      </div>\n      </BrowserRouter>\n    \n     \n    );\n  }  \n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}